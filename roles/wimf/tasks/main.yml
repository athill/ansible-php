---
## wimf
# checkout project

- name: Clone git repository
  git: >
    dest={{project_dir}}
    repo={{repo_url}}
    update=no
    version={{ repo_version }}
  become: yes
  become_user: www-data
  register: cloned

- name: chown {{ project_dir }}
  command: "{{ item }}"
  with_items:
    - chown -R {{user}}:www-data {{ project_dir }}
    - find {{ project_dir }} -type d -exec chmod 775 {} +
    - find {{ project_dir }} -type f -exec chmod 664 {} +

### ssl
- name: copy ini file
  template: src=le-renew.ini.j2 dest=/usr/local/etc/le-renew-{{ host }}.ini

- name: stop nginx
  service: name=nginx state=stopped

- name: run letsencrypt
  shell: ./letsencrypt-auto certonly --standalone --agree-tos --config /usr/local/etc/le-renew-{{ host }}.ini
  args: 
    chdir: /opt/letsencrypt
    creates: /etc/letsencrypt/live/{{host}}/fullchain.pem

- name: Configure nginx
  template: src=nginx.conf.j2 dest=/etc/nginx/sites-available/{{ host }}
  notify:
    - restart php-fpm

- name: start nginx
  service: name=nginx state=started

- name: copy renewal script
  template: src=le-renew.j2 dest=/usr/local/sbin/le-renew-{{ host }} mode=0700

- name: create .well-known directory
  file: path={{ project_dir }}/public/.well-known state=directory mode=0755 group={{user}}:www-data

- name: Install renewal cron
  cron: name="Let's Encrypt Renewal {{ host}}" day=1 hour=2 minute=30 
        job="/usr/local/sbin/le-renew-{{ host }} >> /var/log/le-renewal.log"     

### nginx
- name: Configure nginx
  template: src=nginx.conf.j2 dest=/etc/nginx/sites-available/{{ host }}
  notify:
    - restart php-fpm
    - restart nginx

- name: create symbolic link for nginx
  file:
    src: /etc/nginx/sites-available/{{ host }}
    dest: /etc/nginx/sites-enabled/{{ host }}
    state: link
    force: true 

# - name: add composer config dir for github oauth
#   command: mkdir -p "{{user_dir}}/.config/composer"
#   become: yes
#   become_user: "{{user}}"

# - name: add auth.json file
#   template: src=github-oauth.json.j2 dest="{{user_dir}}/.config/composer/auth.json" owner="{{user}}"
#   become: yes
#   become_user: "{{user}}"

### composer
- name: composer create-project
  composer: 
    command: install 
    working_dir: "{{project_dir}}" 
    # optimize_autoloader=no
  become: yes
  become_user: "{{user}}"
  # when: cloned|changed

### .env
- name: copy .env file
  template: src=.env.j2 dest={{project_dir}}/.env force=yes

- debug: var=project_dir    

# artisan migrate
- name: artisan migrate
  shell: php "{{project_dir}}/artisan" migrate --force
  become: yes
  become_user: "{{user}}"
  args:
    chdir: "{{project_dir}}"  

- name: set NODE_ENV
  shell: export NODE_ENV={{app_env}}
  become: yes
  become_user: "{{user}}"


- name: run npm install
  shell: npm install
  become: yes
  become_user: "{{user}}"
  args:
    chdir: "{{project_dir}}"

- name: build
  command: "{{item}}"
  with_items:
  - npm run build
  become: yes
  become_user: "{{user}}"
  args:
    chdir: "{{project_dir}}"


- name: install and run gulp
  command: "{{ item }}"
  with_items:
    - npm install gulp
    - gulp less
  become: yes
  become_user: "{{user}}"
  args:
    chdir: "{{project_dir}}"

   

